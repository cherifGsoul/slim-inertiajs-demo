#!/usr/bin/env php
<?php declare(strict_types=1);

use Noesis\Cli\Cli;

require_once __DIR__ . '/vendor/autoload.php';

$Console = new \Noesis\Console\Console;

Cli::createFrom($argv, [
    'help' => [
        'prefix'      => 'h',
        'longPrefix'  => 'help',
        'description' => 'Display help documentation for a command',
        'noValue'     => true
    ],
    'name' => [
        'prefix'      => 'n',
        'longPrefix'  => 'name',
        'description' => 'Name argument of a command (e.g. name of a presenter class)',
        'castTo'      => 'string',
    ]
]);

Cli::intro();

if (count($argv) < 2) {
    Cli::displayUsage();
} else {
    switch($argv[1]) {
        case 'help': 
            Cli::displayUsage();
        break;
        case 'list' :
            Cli::listAllCommands($Console);
        break;
        default:
            if (str_contains($argv[1], ':')) {
                $segments = explode(':', $argv[1]);
                $methodName = lcfirst($segments[0]);
                $to_make = $segments[1];
                call_user_func([Cli::class, $methodName], $to_make);
            } else {
                Cli::unknownCommandError();
                Cli::displayUsage();
            }
        break;
    }
}









// $console->table([
//     [
//         'Version' => '0.1',
//         'Author' => 'Luke Watts'
//     ]
// ]);

// $console->inline('Waiting');
// for ($i = 0; $i < 10; $i++) {
//     $console->inline('.');
// }
// $console->out('');


// $console->red('Red text');
// $console->blue('blue text');

// $console->columns(range(1, 50));

// $console->border('*');

// $padding = $console->padding(10);

// $padding->label('Eggs')->result('$1.99');
// $padding->label('Oatmeal')->result('$4.99');
// $padding->label('Bacon')->result('$2.99');

// $console->usage([
//     'what',
//     'is',
//     'this',
// ]);

// $console->json([
//     'name' => 'Gary',
//     'age'  => 52,
//     'job'  => 'Engineer',
// ]);

// $console->dump([
//     'This',
//     'That',
//     'Other Thing',
// ]);

// $console->flank('Look at me. Now.');
// $console->flank('Look at me. Now.', '!', 5);

// $console->br();

// $console->br()->out('I have moved down a line.');

// $console->tab()->out('I am all sorts of indented.');
// $console->tab()->tab()->tab()->out('I am even more indented.');
// $console->tab(7)->out('I am extremely indented.');

// $console->draw('bender');

// $console->animation('hello')->enterFrom('right');
// $console->animation('hello')->enterFrom('left');
// $console->animation('hello')->enterFrom('top');
// $console->animation('hello')->enterFrom('bottom');

// $console->animation('hello')->exitTo('right');
// $console->animation('hello')->exitTo('left');
// $console->animation('hello')->exitTo('top');
// $console->animation('hello')->exitTo('bottom');

// $console->clear();
